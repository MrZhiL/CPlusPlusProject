C++核心编程
本阶段主要针对C++面向对象编程技术做详细讲解，探讨C++中的核心和精髓

1 内存分区模型
C++ 程序在执行时，将内存大方向划分为4个区域
 代码区：存放函数体的二进制代码，由操作系统进行管理
 全局区：存放全局变量和静态变量以及常量
 栈  区：由编译器自动分配释放，存放函数的参数值、局部变量等
 堆  区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收

内存四区的意义：不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程。

1.1 程序运行前：
	在程序编译后，生成了exe可执行程序，未执行该程序前分为两个区域
	
	代码区：
		存放CPU执行的机器指令，
		代码区是共享的，共享的目的是对于频繁执行的程序，只需要在内存中有一份代码即可
		代码去是只读的，使其只读的原因是防止程序意外地修改了它的指令

	全局区：
		全局变量和静态变量存放在此
		全局区还包括了常量区，字符串常量和其他常量也存放在此
		该区域的数据在程序结束后有操作系统释放

1.2 程序运行后
	
	栈  区：
		由编译器自动分配释放，存放函数的参数值、局部变量等
		注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放
	
	堆  区：
		由程序员释放，若程序员不释放，程序结束时有操作系统回收
		在C++中主要利用new在堆区中开辟内存


4、 类和对象
	
	C++面向对象的三大特性为：封装、继承、多态
	
	C++认为万事万物皆为对象，对象上有其属性和行为。

	例  如：
		人可以作为对象，属性有姓名、年龄、身高、体重……，行为有走、跑、跳、吃饭、唱歌……
		车也可以作为对象，属性有轮胎、方向盘、车灯……，行为有载人、放音乐、放空调……
		具有相同性质的对象，我们可以抽象为类，人属于人类，车属于车类


4.1 封装

	4.1.1 封装的对象
		
	封装是C++面向对象的三大特性之一
	封装的意义：
		将属性和行为作为一个整体，表现生活中的事物
		将属性和行为加以权限控制
	封装的意义一：
		在设计类的时候，属性和行为写在一起，变现事物

	语法： class 类名{  访问权限： 属性 / 行为};

	示例1：设计一个圆类，求圆的周长
	示例2：设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号

	类在设计时，可以把属性和行为放在不同的权限下加以控制	
	访问权限有三种：
		public : 公共权限
		protected : 保护权限
		private : 私有权限

	4.1.2 struct和class的区别

		在C++中struct和class唯一的区别就在于默认的访问权限不同
		区  别：
			struct默认权限为公共
			class 默认权限为私有


	4.1.3 成员属性设置为私有
		
		优点1：将所有成员属性设置为私有，可以自己控制读写权限
		优点2：对于写权限，我们可以检测数据的有效性



4.2 对象的初始化和清理
	
	生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全

	C++中的面向对象来源于生活，每个对象也都会有初始化设置实际对象销毁前的清理数据的设置

	4.2.1 构造函数和析构函数
	
	对象的初始化和清理也是两个非常重要的安全问题
		一个对象或者变量没有初始状态，对其使用的后果是未知的
		同样的使用完一个对象或者变量，没有及时清理，也会造成一定的安全问题

	C++中利用了构造函数和析构函数解决了上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。
	对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编译器会提供编译器提供的构造函数和析构函数是空实现。

	构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无需手动调用。
	析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。
	

	构造函数语法：类名() { }
	1、构造函数，没有返回值也不写void
	2、函数名称与类名相同
	3、构造函数可以有参数，因此可以发生重载
	4、程序在调用对象时会自动调用构造函数，无需手动调用，而且只会调用一次

	析构函数语法：~类名() { }
	1、析构函数，没有返回值也不写void
	2、函数名称与类名相同，在名称前加上符号~
	3、析构函数不可以有参数，因此不可以发生重载
	4、程序在对象销毁前会自动调用析构函数，无需手动调用，而且只会调用一次

	4.2.2 构造函数的分类及调用
	
	两种分类方式：
		按参数分为：有参构造和无参构造，无参构造又称为默认构造函数
		按类型分为：普通构造和拷贝构造

	三种调用方式：
		括号法、显示法、隐式转换法

	
	
	4.3.2 this指针概念
	
	通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的
	每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码
	 
	那么问题是：这一块代码是如何区分那个对象调用自己的呢？
	
	C++通过提供特殊的对象指针，this指针，解决上述问题。this指针指向被调用的成员函数所属的对象
	
	this指针是隐含每一个非静态成员函数的一种指针
	this指针不需要定义，直接使用即可
	
	this指针的用途：
		当形参和成员函数变量同名时，可用this指针来区分
		在类的非静态成员函数中返回对象本身，可使用return *this
		
		
	4.3.3 空指针访问成员函数
		
		C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针
		
		如果用到this指针，需要加以判断保证代码的健壮性 


		
	4.3.4 const修饰成员函数
	
		常函数：
			成员函数后加const后我们称这个函数为常函数
			常函数内不可以加修改成员属性
			成员属性声明加关键字mutable后，在常函数中仍然可以修改
			
		常对象：
			声明对象前加const称该对象为常对象
			常对象只能调用常函数

4.4 友元

	生活中你的家有客厅(Public)、有自己的卧室(Private)
	客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去
	但是，你也可以允许你的好友进去
	
	在程序中，有些私有属性也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术
	
	友元的目的就是让一个函数或者类 访问另一个类中的私有成员
	
	友元的关键字为 friend
	
	友元的三种实现：
		全局函数做友元
		类做友元
		成员函数做友元


4.5 运算符重载
	
	对于内置的数据类型，编译器知道如何进行运算：
	int a = 10;  int b = 10; int c=a+b; 

4.6 继承
	继承是面向对象三大特性之一
	 

4.7 多态

4.7.1 多态的基本概念

	多态是C++面向对象的三大特性之一
	
	多态分为两类：
	
	静态多态：函数重载 和 运算符重载属于静态多态，复用函数名
	动态多态：派生类和虚函数实现多运行时多态
	
	静态多态和动态多态的区别：
		静态多态的函数地址早绑定。编译阶段确定函数地址 
		动态多态的函数地址晚绑定，运行阶段确定函数地址
		


5 文件操作
	
	程序运行时产生的数据都是属于临时数据，程序一旦运行结束都会被释放
	
	通过文件可以将数据持久化
	
	C++中对文件操作需要包含头文件<fstream>
	
	文件类型分为两种：
		
		1、文本文件：文本文件的ASCII码形式存储在计算机中
		2、二进制文文本：文件以文本的二进制形式存储在计算机中，用户一般不能直接读取 
	
	操作文件的三大类：
		1、ofstream：写操作（output-file-stream） 
		2、ifstream：读操作（input-file-stream）
		3、 fstream：读写操作 （output/input-file-stream）
	
	5.1.1 写文件
		写文件步骤如下：
		1、包含头文件：#include <fstream>
		2、创建文件流：ofstream ofs;
		3、打开文件  ：ofs.open("文件路径",打开方式);
		4、写数据    ：ofs<<"写入的数据";
		5、关闭文件  : ofs.close();
		
		文件打开方式：
		ios::in     为读文件而打开文件
		ios::out    为写文件而打开文件 
		ios::ate    初始位置：文件尾 
		ios::app    追加方式写文件 
		ios::trunc  如果文件存在则先删除，再创建 
		ios::binary 二进制方式 
	 	
	 	注意：文件打开方式可以配合使用，利用|操作符 
		例如：用二进制方式写文件： ios::binary | ios::out 

		读文件的四种读取方式：
		 


